%% SUBIR AL REPOSITORIO EL SIGUIENTE EJERCICIO DESCRITO EN EL VIDEO DE LA CLASE

conectado(i,2).
conectado(2,3).
conectado(2,8).
conectado(8,9).
conectado(9,3).
conectado(3,4).
conectado(4,10).
conectado(10,16).
conectado(16,22).
conectado(22,21).
conectado(21,15).
conectado(15,14).
conectado(14,13).
conectado(13,7).
conectado(7,1).
conectado(14,20).
conectado(20,26).
conectado(22,28).
conectado(26,27).
conectado(27,28).
conectado(28,29).
conectado(29,23).
conectado(23,17).
conectado(17,11).
conectado(11,5).
conectado(1,7). %por eliminar
conectado(5,6).
conectado(28,34).
conectado(34,35).
conectado(35,36).
conectado(36,30).
conectado(30,24).
conectado(24,18).
conectado(18,12).
conectado(32,31).
conectado(31,25).
conectado(25,19).
conectado(34,33).
conectado(33,32).
conectado(32,f).


%Se eliminan los pesos para poder obtener varias rutas y dejar de lado la mas corta
%Se obtiene aqui lo que es la ruta de i hasta f
rutaRecorrer(Ini, Fin, Ruta) :-
    % Se utiliza un acumulador para guardar la ruta
    rutaRecorrerAux(Ini, Fin, [], Ruta).

rutaRecorrerAux(Ini, Fin, Acum, Ruta) :-
    % Si Ini es igual a Fin, se agrega Fin al acumulador y se retorna la ruta
    Ini = Fin,
    reverse([Fin|Acum], Ruta).

rutaRecorrerAux(Ini, Fin, Acum, Ruta) :-
    % Se tienen aqui todos los nodos conectados a Ini
    conectado(Ini, Nodo),
    % Se verifica a ver si esta va al acumulador
    not(member(Nodo, Acum)),
    % Se llama recursivamente al predicado con Nodo como nuevo Ini y se agrega Ini al acumulador
    rutaRecorrerAux(Nodo, Fin, [Ini|Acum], Ruta).

% Aqui se llaman todas las posibles rutas a obtener
rutasPosibles(Ini, Fin, Rutas) :-
    % Con el findall se obtienen todas las rutas posibles
    findall(Ruta, rutaRecorrer(Ini, Fin, Ruta), Rutas).


USAR ASI:
rutasPosibles(i,f,RUTAS).  % Aqui se obtienen las rutas menos detalladas(no aparecen completas).

rutasPosibles(i,f,RUTAS), write(RUTAS). %Aqui se detallan mejor la ruta completa.
