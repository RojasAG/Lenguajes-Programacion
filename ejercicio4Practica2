// Ejercicios de rutas en Grafos con bÃºsqueda en profundidad

//        a ---- c ---- x
//      /   \  /
//     /     \/
//   i       X
//     \    / \
//      \  /   \
//        b ---- d ---- f
let grafo = [
    [('i', 0);('a', 1);('b', 2)];
    [('a', 1);('i', 0);('c', 3);('d', 2)];
    [('b', 2);('i', 0);('c', 1);('d', 4)];
    [('c', 3);('a', 1);('b', 1);('x', 2)];
    [('d', 2);('a', 4);('b', 1);('f', 3)];
    [('f', 3);('d', 2)];
    [('x', 2);('c', 3)]
]

let miembro e (lista: ('a * 'b) list) =
    lista
    |> List.map (fun (x,_) -> x = e)
    |> List.reduce (fun x y -> x || y)

let rec vecinos nodo grafo =
    match grafo with
    | [] -> []
    | ((head, peso)::adyacencias)::tail when nodo = head -> adyacencias
    | _::tail -> vecinos nodo tail 
(*let rec vecinos nodo grafo =
    match grafo with
    | [] -> []
    | ((head::_)::(tail::_))::_ when nodo = head -> tail
    | _::tail -> vecinos nodo tail*) 

let extender (ruta: _ list) grafo =
    (vecinos (fst ruta.Head) grafo)
    |> List.map (fun (x,peso) -> if (miembro x ruta) then [] else (x,peso)::ruta )
    |> List.filter (fun x -> x <> [])

//Fucion que recibe modificacion                   
let rec prof_aux fin (rutas: ('a * int) list list) grafo =
    if rutas = [] then
        []
    elif fin = (fst rutas.Head.Head) then
        [List.rev rutas.Head] //Con ello se recorre con listas para asi poder encontrar en la siguiente linea la ruta mas corta
            @ (prof_aux fin rutas.Tail grafo)
    elif true then
        prof_aux fin (List.append (extender rutas.Head grafo) rutas.Tail) grafo
    else
        []
//Funcion que recibe modificacion
let prof ini fin grafo =
    prof_aux fin [[(ini,0)]] grafo
        |> List.sortBy (fun ruta -> List.fold (fun acc (_,peso) -> acc + peso) 0 ruta)
        |> List.tryHead
        |> Option.defaultValue []


printf "%A" (prof 'i' 'x' grafo)

